;;;;;;;;;;;;;;;;;;;;;;
;;;; MAIN WIDGETS ;;;;
;;;;;;;;;;;;;;;;;;;;;;

(deflisten workspaces `eww-workspaces`)

(defwidget left-wgt []
    (box :class "left-wgt workspaces" (literal :content workspaces)))

(defwidget center-wgt []
	(box :class "center-wgt"
			 :orientation "h"
			 :space-evenly false
			 (button :onclick ""
		   		     (label :text "${formattime(EWW_TIME, "%H:%M:%S")}"))))


(defwidget right-wgt []
  (box :class "right-wgt"
			 :orientation "h"
			 :space-evenly false
			 :halign "end"
			 (ram-wgt)
			 (disk-wgt)
			 (wifi-wgt)
		   (battery-wgt :battery {EWW_BATTERY.BAT0})))


;;;;;;;;;;;;;;;;;;;;;;;;
;;;; BATTERY WIDGET ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;

; This could be another way to show the battery, let's see if I like the 
; pi chart first
(defvar battery_icons '["󰂃", "󰁻", "󰁼", "󰁽", "󰁾", "󰁿", "󰂀", "󰂁", "󰂂", "󰁹"]')

(defvar bat_tt_polling false)
(defpoll bat_tt 
		:interval "5s"
		:run-while bat_tt_polling 
		`acpi`)


(defwidget battery-wgt [battery]
			 (box :class "module battery-wgt ${battery.capacity < 25 ? "warn" : ""}"
			 			:vexpand false
						:hexpand false 
						:tooltip bat_tt
						(eventbox :onhover "${EWW_CMD} update bat_tt_polling=true"
											:onhoverlost "${EWW_CMD} update bat_tt_polling=false"
											(overlay
													{battery_icons[
															round(battery.capacity / (100 / arraylength(battery_icons)),0) - 1]}
													(box :class "awe"
													     {battery.status == "Charging" ? "󱐋" : "󱐋" })))))

;;;;;;;;;;;;;;;;;;;;
;;; WIFI WIDGET ;;;;
;;;;;;;;;;;;;;;;;;;;

(defvar wifi_icons '["󰤯", "󰤟", "󰤢", "󰤥", "󰤨"]')

(defvar wifi_strength_polling true)
(defpoll wifi_strength
	:interval "15s"
	:initial 100
	:run-while wifi_strength_polling
	"nmcli -f IN-USE,SIGNAL,SSID device wifi | awk '/^\*/{if (NR!=1) {print $2}}'")

(defvar wifi_tt_polling false)
(defpoll wifi_tt 
		:interval "1s"
		:run-while wifi_tt_polling 
		`nmcli device`)

(defwidget wifi-wgt []
	(box :class "module wifi-wgt"
			 :visible true
			 (eventbox :onhover "${EWW_CMD} update wifi_tt_polling=true"
			 					 :onhoverlost "${EWW_CMD} update wifi_tt_polling=false"
 
 								 "${wifi_icons[round(wifi_strength / (100 / arraylength(wifi_icons)) ,0) - 1]}  ")))


;;;;;;;;;;;;;;;;;;;;
;;;; RAM WIDGET ;;;;
;;;;;;;;;;;;;;;;;;;;

(defvar ram_tt_polling false)
(defpoll ram_tt 
		:interval "1s"
		:run-while ram_tt_polling 
		`cat /proc/meminfo`)


(defwidget ram-wgt []
			 (box :class "module ram-wgt"
			 			:vexpand "false"
						:hexpand "false"
						:visible {EWW_RAM.used_mem_perc < 75}
            (circular-progress
						  	:value {EWW_RAM.used_mem_perc}
              	:thickness 3
								:width 25
								:height 25
								:tooltip ram_tt 
								(eventbox :onhover "${EWW_CMD} update ram_tt_polling=true"
													:onhoverlost "${EWW_CMD} update ram_tt_polling=false"
													))))


;;;;;;;;;;;;;;;;;;;;;
;;;; DISK WIDGET ;;;;
;;;;;;;;;;;;;;;;;;;;;

(defvar disk_tt_polling false)
(defpoll disk_tt 
		:interval "1s"
		:run-while ram_tt_polling 
		`lsblk`)


(defwidget disk-wgt []
	(box :class "module disk-wgt"
			 :visible {EWW_DISK["/"].used / EWW_DISK["/"].total < 0.9}
			 (circular-progress
						:value {100 * EWW_DISK["/"].used / EWW_DISK["/"].total}
						:thickness 3
						:width 25
						:height 25
						:tooltip disk_tt 
						(eventbox :onhover "${EWW_CMD} update disk_tt_polling=true"
											:onhoverlost "${EWW_CMD} update disk_tt_polling=false"
											"󰨣 "))))

;;;;;;;;;;;;;;;;;
;;;; WINDOWS ;;;;
;;;;;;;;;;;;;;;;;

(defwindow bar
  :monitor 0
  :geometry (geometry :width "100%"
											:height "10px"
                      :anchor "top center")
	:exclusive true
  (centerbox :orientation "h"
		(left-wgt)
		(center-wgt)
    (right-wgt)))

(defvar calender_open false)
(defwindow calender
	:monitor 0
  :geometry (geometry :width "50%"
                      :anchor "top center")
	(literal ""))

